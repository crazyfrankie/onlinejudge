// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package article

import (
	"github.com/IBM/sarama"
	"github.com/redis/go-redis/v9"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"oj/internal/article/event"
	"oj/internal/article/repository"
	"oj/internal/article/repository/cache"
	"oj/internal/article/repository/dao"
	"oj/internal/article/service"
	"oj/internal/article/web"
)

// Injectors from wire.go:

func InitConsumer(db *gorm.DB, cmd redis.Cmdable, client sarama.Client, l *zap.Logger) *event.ArticleConsumer {
	interactiveDao := dao.NewInteractiveDao(db)
	interactiveCache := cache.NewInteractiveCache(cmd)
	interactiveArtRepository := repository.NewInteractiveArtRepository(interactiveDao, interactiveCache)
	articleConsumer := event.NewArticleConsumer(client, interactiveArtRepository, l)
	return articleConsumer
}

func InitArticleHandler(db *gorm.DB, cmd redis.Cmdable, client sarama.Client, l *zap.Logger) *web.ArticleHandler {
	gormArticleDao := dao.NewArticleDao(db)
	articleRepository := repository.NewArticleRepository(gormArticleDao)
	syncProducer := NewSyncProducer(client)
	producer := event.NewArticleProducer(syncProducer)
	articleService := service.NewArticleService(articleRepository, l, producer)
	interactiveDao := dao.NewInteractiveDao(db)
	interactiveCache := cache.NewInteractiveCache(cmd)
	interactiveArtRepository := repository.NewInteractiveArtRepository(interactiveDao, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveArtRepository)
	articleHandler := web.NewArticleHandler(articleService, l, interactiveService)
	return articleHandler
}

// wire.go:

func NewSyncProducer(client sarama.Client) sarama.SyncProducer {
	res, err := sarama.NewSyncProducerFromClient(client)
	if err != nil {
		panic(err)
	}

	return res
}
